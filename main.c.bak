#include "lvgl/lvgl.h"
#include "lv_drivers/display/fbdev.h"
#include "lv_drivers/indev/evdev.h"
#include <unistd.h>
#include <pthread.h>
#include <time.h>
#include <sys/time.h>
#include <stdio.h>
#include <stdlib.h>

#define DISP_BUF_SIZE (128 * 1024)

static void btn_event_cb(lv_event_t *e) {
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t * btn = lv_event_get_target(e);
}

static void shutdown(lv_event_t *e) {
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t * btn = lv_event_get_target(e);
	if(code == LV_EVENT_CLICKED) system("/sbin/shutdown now");
}

static void reboot(lv_event_t *e) {
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t * btn = lv_event_get_target(e);
	if(code == LV_EVENT_CLICKED) system("/sbin/reboot");
}

static void ta_event_cb(lv_event_t * e) {
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t * ta = lv_event_get_target(e);
    lv_obj_t * kb = lv_event_get_user_data(e);
    if(code == LV_EVENT_FOCUSED) {
        lv_keyboard_set_textarea(kb, ta);
        lv_obj_clear_flag(kb, LV_OBJ_FLAG_HIDDEN);
    }

    if(code == LV_EVENT_DEFOCUSED) {
        lv_keyboard_set_textarea(kb, NULL);
        lv_obj_add_flag(kb, LV_OBJ_FLAG_HIDDEN);
    }
}

int main(int argc, char *argv[]) {
	if(argc != 5) {
		printf("Usage: %s width height fbdev_path evdev_path\n", argv[0]);
		return 1;
	}

	/*LittlevGL init*/
    lv_init();

    /*Linux frame buffer device init*/
    fbdev_init(argv[3]);

    /*A small buffer for LittlevGL to draw the screen's content*/
    static lv_color_t buf[DISP_BUF_SIZE];

    /*Initialize a descriptor for the buffer*/
    static lv_disp_draw_buf_t disp_buf;
    lv_disp_draw_buf_init(&disp_buf, buf, NULL, DISP_BUF_SIZE);

    /*Initialize and register a display driver*/
    static lv_disp_drv_t disp_drv;
    lv_disp_drv_init(&disp_drv);
    disp_drv.draw_buf   = &disp_buf;
    disp_drv.flush_cb   = fbdev_flush;
	disp_drv.hor_res	= atoi(argv[1]);
	disp_drv.ver_res	= atoi(argv[2]);
    lv_disp_drv_register(&disp_drv);

    evdev_init(argv[4]);
    static lv_indev_drv_t indev_drv_1;
    lv_indev_drv_init(&indev_drv_1); /*Basic initialization*/
    indev_drv_1.type = LV_INDEV_TYPE_POINTER;

    /*This function will be called periodically (by the library) to get the mouse position and state*/
    indev_drv_1.read_cb = evdev_read;
    lv_indev_t *mouse_indev = lv_indev_drv_register(&indev_drv_1);


    /*Set a cursor for the mouse*/
    LV_IMG_DECLARE(mouse_cursor_icon)
    lv_obj_t * cursor_obj = lv_img_create(lv_scr_act()); /*Create an image object for the cursor */
    lv_img_set_src(cursor_obj, &mouse_cursor_icon);           /*Set the image source*/
    lv_indev_set_cursor(mouse_indev, cursor_obj);             /*Connect the image  object to the driver*/

	lv_obj_t * btn = lv_btn_create(lv_scr_act());     /*Add a button the current screen*/
    lv_obj_set_pos(btn, 5, 5);                            /*Set its position*/
    lv_obj_set_size(btn, disp_drv.hor_res-10, disp_drv.ver_res/3-7.5);                          /*Set its size*/
    lv_obj_add_event_cb(btn, btn_event_cb, LV_EVENT_ALL, NULL);           /*Assign a callback to the button*/

    lv_obj_t * label = lv_label_create(btn);          /*Add a label to the button*/
    lv_label_set_text(label, "palera1n");                     /*Set the labels text*/
    lv_obj_center(label);

	lv_obj_t * btn2 = lv_btn_create(lv_scr_act());
    lv_obj_set_pos(btn2, 5, disp_drv.ver_res/3+2.5);                        
    lv_obj_set_size(btn2, disp_drv.hor_res/2-7.5, disp_drv.ver_res/3-7.5);                       
    lv_obj_add_event_cb(btn2, btn_event_cb, LV_EVENT_ALL, NULL);        
	
    lv_obj_t * label2 = lv_label_create(btn2);          /*Add a label to the button*/
    lv_label_set_text(label2, "SSH");                     /*Set the labels text*/
    lv_obj_center(label2);
	
	lv_obj_t * btn3 = lv_btn_create(lv_scr_act());    
    lv_obj_set_pos(btn3, disp_drv.hor_res/2+2.5, disp_drv.ver_res/3+2.5);                        
    lv_obj_set_size(btn3, disp_drv.hor_res/2-7.5, disp_drv.ver_res/3-7.5);                         
    lv_obj_add_event_cb(btn3, btn_event_cb, LV_EVENT_ALL, NULL);          
	
    lv_obj_t * label3 = lv_label_create(btn3);          /*Add a label to the button*/
    lv_label_set_text(label3, "Shell");                     /*Set the labels text*/
    lv_obj_center(label3);
	
	lv_obj_t * btn4 = lv_btn_create(lv_scr_act());
    lv_obj_set_pos(btn4, 5, disp_drv.ver_res/1.5);                        
    lv_obj_set_size(btn4, disp_drv.hor_res/2-7.5, disp_drv.ver_res/3-7.5);                       
    lv_obj_add_event_cb(btn4, shutdown, LV_EVENT_ALL, NULL);        
	
    lv_obj_t * label4 = lv_label_create(btn4);          /*Add a label to the button*/
    lv_label_set_text(label4, "Shut Down");                     /*Set the labels text*/
    lv_obj_center(label4);

	lv_obj_t * btn5 = lv_btn_create(lv_scr_act());    
    lv_obj_set_pos(btn5, disp_drv.hor_res/2+2.5, disp_drv.ver_res/1.5);                        
    lv_obj_set_size(btn5, disp_drv.hor_res/2-7.5, disp_drv.ver_res/3-7.5);
    lv_obj_add_event_cb(btn5, reboot, LV_EVENT_ALL, NULL);          
	
    lv_obj_t * label5 = lv_label_create(btn5);          /*Add a label to the button*/
    lv_label_set_text(label5, "Reboot");                     /*Set the labels text*/
    lv_obj_center(label5);

	lv_obj_t * kb = lv_keyboard_create(lv_scr_act());

	lv_obj_t * ta;
    ta = lv_textarea_create(lv_scr_act());
    lv_obj_align(ta, LV_ALIGN_TOP_LEFT, 10, 10);
    lv_obj_add_event_cb(ta, ta_event_cb, LV_EVENT_ALL, kb);
    lv_textarea_set_placeholder_text(ta, "Hello");
    lv_obj_set_size(ta, 140, 80);
	/*Handle LitlevGL tasks (tickless mode)*/
    while(1) {
        lv_timer_handler();
        usleep(5000);
    }

    return 0;
}

/*Set in lv_conf.h as `LV_TICK_CUSTOM_SYS_TIME_EXPR`*/
uint32_t custom_tick_get(void)
{
    static uint64_t start_ms = 0;
    if(start_ms == 0) {
        struct timeval tv_start;
        gettimeofday(&tv_start, NULL);
        start_ms = (tv_start.tv_sec * 1000000 + tv_start.tv_usec) / 1000;
    }

    struct timeval tv_now;
    gettimeofday(&tv_now, NULL);
    uint64_t now_ms;
    now_ms = (tv_now.tv_sec * 1000000 + tv_now.tv_usec) / 1000;

    uint32_t time_ms = now_ms - start_ms;
    return time_ms;
}
